---
AWSTemplateFormatVersion: 2010-09-09

Description: Jenkins EC2 Master & ECS Workers

Parameters:
  # Tags
  Owner:
    Type: String
    Default: first.last@domain.com
  DeleteAfter:
    Type: String
    Default: 00/00/201x

  # Master
  MasterAdminUserName:
    Type: String
  MasterAdminPassword:
    NoEcho: true
    Type: String
    MinLength: 8
    AllowedPattern: "[a-zA-Z0-9!?]*"
    ConstraintDescription: Must only contain upper and lowercase letters, numbers and contain a minimum of 8 characters
  MasterAmiId:
    Type: String
  MasterSubnetIdList:
    Type: List<AWS::EC2::Subnet::Id>
  MasterSecurityGroupIdList:
    Type: List<AWS::EC2::SecurityGroup::Id>
  MasterElbSecurityGroupIdList:
    Type: List<AWS::EC2::SecurityGroup::Id>
  MasterEc2Key:
    Type: AWS::EC2::KeyPair::KeyName
  MasterIamProfile:
    Type: String
  JenkinsVersion:
    Type: String
    Default: 2.7.4-1.1
  InstallPluginsOption:
    Type: String
    Default: minimum
    AllowedValues:
      - all
      - minimum
      - none
  PluginBundleVersion:
    Type: String
    Default: latest
  MasterElbSubnetIdList:
    Type: List<AWS::EC2::Subnet::Id>
  MasterInstanceType:
    Description: Master Instance Type
    Type: String
    Default: m3.medium
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge

  # Worker
  WorkerAmiId:
    Type: String
  WorkerAmiVersion:
    Type: String
  WorkerSubnetIdList:
    Type: List<AWS::EC2::Subnet::Id>
  WorkerSecurityGroupIdList:
    Type: List<AWS::EC2::SecurityGroup::Id>
  WorkerEc2Key:
    Type: AWS::EC2::KeyPair::KeyName
  WorkerIamProfile:
    Type: String
  WorkerMinCount:
    Type: Number
    Default: 1
  WorkerMaxCount:
    Type: Number
    Default: 4
  WorkerInstanceType:
    Type: String
    Default: m3.medium
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge

  # Deployment
  VpcId:
    Type: AWS::EC2::VPC::Id
  S3DeployBucketName:
    Type: String
  CookbookVersion:
    Type: String
    Default: latest
  ProxyHost:
    Type: String
  ProxyPort:
    Type: String
  ChefRpmVersion:
    Type: String
    Default: "12.17.44-1"

  # Backup
  S3BackupBucketName:
    Type: String
  SetupBackups:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  BackupInterval:
    Type: String
    Default: daily
    AllowedValues:
      - daily
      - hourly
      - weekly

  # Restore
  RestoreFromBackup:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  RestoreStackName:
    Type: String
    Default: none
    Description: If restoring from backup, enter previous stack name to restore.

Metadata:
  AWS::CloudFormation::Interface:
  TemplateAuthor: Levon Becker
    ParameterGroups:
    -
      Label:
        default: Tags
      Parameters:
        - Owner
        - DeleteAfter
    -
      Label:
        default: Jenkins Master
      Parameters:
        - MasterAdminUserName
        - MasterAdminPassword
        - MasterAmiId
        - MasterInstanceType
        - MasterSubnetIdList
        - MasterEc2Key
        - MasterSecurityGroupIdList
        - MasterIamProfile
        - JenkinsVersion
        - PluginBundleVersion
        - InstallPluginsOption
        - MasterElbSubnetIdList
        - MasterElbSecurityGroupIdList
    -
      Label:
        default: Jenkins Worker
      Parameters:
        - WorkerAmiId
        - WorkerAmiVersion
        - WorkerInstanceType
        - WorkerSubnetIdList
        - WorkerEc2Key
        - WorkerSecurityGroupIdList
        - WorkerIamProfile
        - WorkerMinCount
        - WorkerMaxCount
    -
      Label:
        default: Deployment
      Parameters:
        - VpcId
        - S3DeployBucketName
        - CookbookVersion
        - ProxyHost
        - ProxyPort
        - ChefRpmVersion
    -
      Label:
        default: Backup
      Parameters:
        - SetupBackups
        - BackupInterval
        - S3BackupBucketName
    -
      Label:
        default: Restore (Re-Hydrate)
      Parameters:
        - RestoreFromBackup
        - RestoreStackName
    ParameterLabels:
      # Tags
      Owner:
        default: Contact Owner
      DeleteAfter:
        default: ASV

      # Master
      MasterAdminUserName:
        default: Jenkins Admin Username
      MasterAdminPassword:
        default: Jenkins Admin Password
      MasterAmiId:
        default: AMI ID
      MasterInstanceType:
        default: Instance Type
      MasterSubnetIdList:
        default: Subnet ID List
      MasterEc2Key:
        default: EC2 SSH Key
      MasterSecurityGroupIdList:
        default: Security Group ID List
      MasterIamProfile:
        default: IAM Instance Profile
      JenkinsVersion:
        default: Jenkins Version
      InstallPluginsOption:
        default: Install Bundled Plugins
      PluginBundleVersion:
        default: Plugins Bundle Version
      MasterElbSubnetIdList:
        default: ELB Subnet ID List
      MasterElbSecurityGroupIdList:
        default: ELB Security Group ID List

      # Worker
      WorkerAmiId:
        default: AMI ID
      WorkerAmiVersion:
        default: AMI Version
      WorkerInstanceType:
        default: Instance Type
      WorkerSubnetIdList:
        default: Subnet ID List
      WorkerEc2Key:
        default: EC2 SSH Key
      WorkerSecurityGroupIdList:
        default: Security Group ID List
      WorkerIamProfile:
        default: IAM Instance Profile
      WorkerMinCount:
        default: Minimum Cluster Instance Count
      WorkerMaxCount:
        default: Maximum Cluster Instance Count

      # Deployment
      VpcId:
        default: VPC ID
      S3DeployBucketName:
        default: S3 Deploy Bucket Name
      CookbookVersion:
        default: Chef Cookbook Version
      ProxyHost:
        default: Proxy Host
      ProxyPort:
        default: Proxy Port
      ChefRpmVersion:
        default: Chef Client Version

      # Backup
      S3BackupBucketName:
        default: S3 Backup Bucket Name
      SetupBackups:
        default: Setup Backups?
      BackupInterval:
        default: Backup Interval

      # Restore
      RestoreFromBackup:
        default: Restore From Backup?
      RestoreStackName:
        default: Restore Stack Name

Conditions:
  HasMasterEc2Key:
    !Not [!Equals [ !Ref MasterEc2Key, '' ]]
  HasWorkerEc2Key:
    !Not [!Equals [ !Ref WorkerEc2Key, '' ]]

Resources:
  # CloudWatch Logs
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30

  MasterLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: !Ref MasterElbSubnetIdList
      SecurityGroups: !Ref MasterElbSecurityGroupIdList
      Tags:
        - Key: OwnerContact
          Value: !Ref Owner
        - Key: ASV
          Value: !Ref DeleteAfter

  MasterLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - MasterLoadBalancer
      - MasterLoadBalancerTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MasterLoadBalancerTargetGroup
      LoadBalancerArn: !Ref MasterLoadBalancer
      Port: 80
      Protocol: HTTP

  MasterLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8080
      HealthCheckPath: /login
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 6
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcId

  MasterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - MasterLoadBalancerTargetGroup
      - MasterInstances
    Properties:
      VPCZoneIdentifier: !Ref MasterSubnetIdList
      LaunchConfigurationName: !Ref MasterInstances
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref "AWS::StackName", -master ] ]
          PropagateAtLaunch: true
        - Key: OwnerContact
          Value: !Ref Owner
          PropagateAtLaunch: true
        - Key: ASV
          Value: !Ref DeleteAfter
      TargetGroupARNs:
        - !Ref MasterLoadBalancerTargetGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1

  MasterInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - MasterLoadBalancer
    Properties:
      ImageId: !Ref MasterAmiId
      SecurityGroups: !Ref MasterSecurityGroupIdList
      InstanceType: !Ref MasterInstanceType
      IamInstanceProfile: !Ref MasterIamProfile
      KeyName: !If [ HasMasterEc2Key, !Ref MasterEc2Key, !Ref "AWS::NoValue"]
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap aws-cli cloud-init
            aws s3 cp s3://${S3DeployBucketName}/binaries/chef-${ChefRpmVersion}.el6.x86_64.rpm /tmp/ --sse && rpm -Uvh /tmp/chef-${ChefRpmVersion}.el6.x86_64.rpm
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterInstances --region ${AWS::Region} --configsets jenkins_master_setup --https-proxy http://${ProxyHost}:${ProxyPort}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MasterAutoScalingGroup --region ${AWS::Region} --https-proxy http://${ProxyHost}:${ProxyPort}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          jenkins_master_setup:
            - config_cfn
            - setup_chef
            - run_chef
            - warm_ebs
        config_cfn:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.MasterInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterInstances --region ${AWS::Region} --configsets jenkins_master_setup --https-proxy http://${ProxyHost}:${ProxyPort}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        setup_chef:
          commands:
            01_mkdir_chef_repo:
              command: "mkdir -p /opt/chef-repo"
            02_mkdir_chef_repo_subdirs:
              cwd: /opt/chef-repo
              command: "mkdir -p cookbooks checksums environments cache backup data_bags roles downloads"
            03_deploy_cookbooks:
              cwd: /opt/chef-repo
              command: !Sub "aws s3 cp s3://${S3DeployBucketName}/cookbooks/jenkins_launcher-${CookbookVersion}.tar.gz /opt/chef-repo/downloads/ --sse && tar -zxf /opt/chef-repo/downloads/jenkins_launcher-${CookbookVersion}.tar.gz -C /opt/chef-repo"
            04_deploy_databags:
              cwd: /opt/chef-repo
              command: "cp -R cookbooks/jenkins_launcher/test/data_bags/jenkins_launcher data_bags/"
          files:
            "/opt/chef-repo/client.rb":
              content: !Sub |
                node_name 'federated-jenkins-launcher'
                checksum_path '/opt/chef-repo/checksums'
                file_cache_path '/opt/chef-repo/cache'
                file_backup_path '/opt/chef-repo/backup'
                cookbook_path '/opt/chef-repo/cookbooks'
                data_bag_path '/opt/chef-repo/data_bags'
                environment_path '/opt/chef-repo/environments'
                role_path '/opt/chef-repo/roles'
                chef_server_url 'http://127.0.0.1:8889'
                encrypted_data_bag_secret '/opt/chef-repo/cookbooks/jenkins_launcher/test/data_bags/encrypted_data_bag_secret'
            "/opt/chef-repo/environments/jenkins_launcher_master.json":
              content: !Sub |
               {
                 "name": "jenkins_launcher_master",
                 "description": "Chef Environment",
                 "cookbook_versions": {},
                 "json_class": "Chef::Environment",
                 "chef_type": "environment",
                 "default_attributes": {
                 },
                 "override_attributes": {
                   "jenkins_launcher": {
                     "role": "master",
                     "aws": {
                       "stack_name": "${AWS::StackName}",
                       "vpc_id": "${VpcId}",
                       "ecs_cluster_name": "${WorkerCluster}",
                       "ecs_cluster_arn": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${WorkerCluster}",
                       "s3_deploy_bucket_name": "${S3DeployBucketName}",
                       "logs_group_name": "${CloudWatchLogsGroup}"
                     },
                     "proxy": {
                       "configure": true,
                       "host": "${ProxyHost}",
                       "port": "${ProxyPort}"
                     },
                     "master": {
                       "users": {
                         "create_default_admin": true,
                         "admin_username": "${MasterAdminUserName}",
                         "admin_password": "${MasterAdminPassword}"
                       },
                       "plugins": {
                         "bundle_option": "${InstallPluginsOption}",
                         "bundle_version": "${PluginBundleVersion}"
                       },
                       "setup_wizard": {
                         "disable": true
                       },
                       "rpm": {
                         "version": "${JenkinsVersion}"
                       },
                       "ecs_cluster": {
                         "configure": true
                       },
                       "ad": {
                         "configure": false
                       }
                     },
                     "restore": {
                       "restore_from_backup": ${RestoreFromBackup},
                       "previous_stack_name": "${RestoreStackName}"
                     },
                     "backups": {
                       "configure": ${SetupBackups},
                       "s3_backup_bucket": "${S3BackupBucketName}",
                       "backup_interval": "${BackupInterval}"
                     }
                   }
                 }
               }
            "/opt/chef-repo/roles/jenkins_launcher.json":
              content: !Sub |
                {
                  "name": "jenkins_launcher",
                  "description": "Default Role",
                  "json_class": "Chef::Role",
                  "default_attributes": {},
                  "override_attributes": {
                  },
                  "chef_type": "role",
                  "run_list": [
                    "recipe[jenkins_launcher]"
                  ],
                  "env_run_lists": {
                  }
                }
        run_chef:
          commands:
            01_run_chef:
              cwd: /opt/chef-repo
              command: "/opt/chef/bin/chef-client -z -o 'role[jenkins_launcher]' --environment jenkins_launcher_master --config /opt/chef-repo/client.rb --log_level info --force-formatter --chef-zero-port 8889"
        warm_ebs:
          commands:
            01_warm_ebs:
              command: "# echo 'ACTION: Performing EBS Warming' && dd if=/dev/xvda of=/dev/xvda conv=notrunc bs=1M status=progress"

  WorkerCluster:
    Type: AWS::ECS::Cluster

  WorkerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - WorkerInstances
    Properties:
      VPCZoneIdentifier: !Ref WorkerSubnetIdList
      LaunchConfigurationName: !Ref WorkerInstances
      MinSize: !Ref WorkerMinCount
      MaxSize: !Ref WorkerMaxCount
      DesiredCapacity: !Ref WorkerMinCount
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref "AWS::StackName", -workers ] ]
          PropagateAtLaunch: true
        - Key: OwnerContact
          Value: !Ref Owner
          PropagateAtLaunch: true
        - Key: ASV
          Value: !Ref DeleteAfter
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WorkerMinCount
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1

  WorkerInstances:
    DependsOn:
      - WorkerCluster
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref WorkerAmiId
      SecurityGroups: !Ref WorkerSecurityGroupIdList
      InstanceType: !Ref WorkerInstanceType
      IamInstanceProfile: !Ref WorkerIamProfile
      KeyName: !If [ HasWorkerEc2Key, !Ref WorkerEc2Key, !Ref "AWS::NoValue"]
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # export http_proxy=http://${ProxyHost}:${ProxyPort}
            # export https_proxy=http://${ProxyHost}:${ProxyPort}
            # export no_proxy=localhost,127.0.0.1,169.254.169.254,10.0.2.0/24,192.168.99.0/24,.kdc.capitalone.com,.ds.capitalone.com,repo.${AWS::Region}.amazonaws.com
            # echo "export http_proxy=http://${ProxyHost}:${ProxyPort}" > /etc/profile.d/proxy.sh
            # echo "export https_proxy=http://${ProxyHost}:${ProxyPort}" >> /etc/profile.d/proxy.sh
            # echo "export no_proxy=localhost,127.0.0.1,169.254.169.254,10.0.2.0/24,192.168.99.0/24,.kdc.capitalone.com,.ds.capitalone.com,repo.${AWS::Region}.amazonaws.com" >> /etc/profile.d/proxy.sh
            yum update -y
            yum install -y aws-cfn-bootstrap aws-cli cloud-init
            aws s3 cp s3://${S3DeployBucketName}/binaries/chef-${ChefRpmVersion}.el6.x86_64.rpm /tmp/ --sse && rpm -Uvh /tmp/chef-${ChefRpmVersion}.el6.x86_64.rpm
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WorkerInstances --region ${AWS::Region} --configsets jenkins_worker_setup --https-proxy http://${ProxyHost}:${ProxyPort}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WorkerAutoScalingGroup --region ${AWS::Region} --https-proxy http://${ProxyHost}:${ProxyPort}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          jenkins_worker_setup:
            - config_cfn
            - setup_chef
            - run_chef
            - warm_ebs
        config_cfn:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WorkerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WorkerInstances --region ${AWS::Region} --configsets jenkins_worker_setup --https-proxy http://${ProxyHost}:${ProxyPort}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        setup_chef:
          commands:
            01_mkdir_chef_repo:
              command: "mkdir -p /opt/chef-repo"
            02_mkdir_chef_repo_subdirs:
              cwd: /opt/chef-repo
              command: "mkdir -p cookbooks checksums environments cache backup data_bags roles downloads"
            03_deploy_cookbooks:
              cwd: /opt/chef-repo
              command: !Sub "aws s3 cp s3://${S3DeployBucketName}/cookbooks/jenkins_launcher-${CookbookVersion}.tar.gz /opt/chef-repo/downloads/ --sse && tar -zxf /opt/chef-repo/downloads/jenkins_launcher-${CookbookVersion}.tar.gz -C /opt/chef-repo"
            04_deploy_databags:
              cwd: /opt/chef-repo
              command: "cp -R cookbooks/jenkins_launcher/test/data_bags/jenkins_launcher data_bags/"
          files:
            "/opt/chef-repo/client.rb":
              content: !Sub |
                node_name 'federated-jenkins-launcher'
                checksum_path '/opt/chef-repo/checksums'
                file_cache_path '/opt/chef-repo/cache'
                file_backup_path '/opt/chef-repo/backup'
                cookbook_path '/opt/chef-repo/cookbooks'
                data_bag_path '/opt/chef-repo/data_bags'
                environment_path '/opt/chef-repo/environments'
                role_path '/opt/chef-repo/roles'
                chef_server_url 'http://127.0.0.1:8889'
                encrypted_data_bag_secret '/opt/chef-repo/cookbooks/jenkins_launcher/test/data_bags/encrypted_data_bag_secret'
            "/opt/chef-repo/environments/jenkins_launcher_worker.json":
              content: !Sub |
                {
                  "name": "jenkins_launcher_worker",
                  "description": "Chef Environment",
                  "cookbook_versions": {},
                  "json_class": "Chef::Environment",
                  "chef_type": "environment",
                  "default_attributes": {
                  },
                  "override_attributes": {
                    "jenkins_launcher": {
                      "role": "worker",
                      "aws": {
                        "ecs_cluster_name": "${WorkerCluster}",
                        "logs_group_name": "${CloudWatchLogsGroup}"
                      },
                      "proxy": {
                        "configure": true,
                        "host": "${ProxyHost}",
                        "port": "${ProxyPort}"
                      }
                    }
                  }
                }
            "/opt/chef-repo/roles/jenkins_launcher.json":
              content: !Sub |
                {
                  "name": "jenkins_launcher",
                  "description": "Default Role",
                  "json_class": "Chef::Role",
                  "default_attributes": {},
                  "override_attributes": {
                  },
                  "chef_type": "role",
                  "run_list": [
                    "recipe[jenkins_launcher]"
                  ],
                  "env_run_lists": {
                  }
                }
        run_chef:
          commands:
            01_run_chef:
              cwd: /opt/chef-repo
              command: "/opt/chef/bin/chef-client -z -o 'role[jenkins_launcher]' --environment jenkins_launcher_worker --config /opt/chef-repo/client.rb --log_level info --force-formatter --chef-zero-port 8889"
        warm_ebs:
          commands:
            01_warm_ebs:
              command: "# echo 'ACTION: Performing EBS Warming' && dd if=/dev/xvda of=/dev/xvda conv=notrunc bs=1M status=progress"

  WorkerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn:
      - WorkerAutoScalingGroup
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WorkerAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1

  WorkerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn:
      - WorkerAutoScalingGroup
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WorkerAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1

  WorkerMemoryAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - WorkerScaleUpPolicy
      - WorkerCluster
    Properties:
      AlarmDescription: Scale-up if Memory > 80% for 5 minutes
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions:
        - !Ref WorkerScaleUpPolicy
      Dimensions:
        - Name: ClusterName
          Value: !Ref WorkerCluster
      ComparisonOperator: GreaterThanThreshold

  WorkerMemoryAlarmLow:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - WorkerScaleDownPolicy
      - WorkerCluster
    Properties:
      AlarmDescription: Scale-down if Memory < 30% for 5 minutes
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 30
      AlarmActions:
        - !Ref WorkerScaleDownPolicy
      Dimensions:
        - Name: ClusterName
          Value: !Ref WorkerCluster
      ComparisonOperator: LessThanThreshold

Outputs:
  MasterURL:
    Description: Jenkins Master ELB URL
    Value: !Sub http://${MasterLoadBalancer.DNSName}
  WorkerCluster:
    Description: Worker Cluster
    Value: !Ref WorkerCluster
  Owner:
    Description: Owner Contact
    Value: !Ref Owner
  ADeleteAfterSV:
    Description: Delete After
    Value: !Ref DeleteAfter
  MasterAmiId:
    Description: AMI ID
    Value: !Ref MasterAmiId
  MasterInstanceType:
    Description: Instance Type
    Value: !Ref MasterInstanceType
  MasterSubnetIdList:
    Description: Subnet List
    Value:  !Join [ ',', !Ref MasterSubnetIdList ]
  MasterEc2Key:
    Description: EC2 SSH Key
    Value: !Ref MasterEc2Key
  MasterSecurityGroupIdList:
    Description: Security Group ID List
    Value: !Join [ ',', !Ref MasterSecurityGroupIdList ]
  MasterIamProfile:
    Description: IAM EC2 Instance Profile
    Value: !Ref MasterIamProfile
  JenkinsVersion:
    Description: Jenkins Version
    Value: !Ref JenkinsVersion
  InstallPluginsOption:
    Description: Install Base Plugins
    Value: !Ref InstallPluginsOption
  PluginBundleVersion:
    Description: Jenkins Master Bundled Plugins Version
    Value: !Ref PluginBundleVersion
  MasterElbSubnetIdList:
    Description: ELB Subnet ID List
    Value: !Join [ ',', !Ref MasterElbSubnetIdList ]
  MasterElbSecurityGroupIdList:
    Description: ELB Security Group ID
    Value: !Join [ ',', !Ref MasterElbSecurityGroupIdList ]
  WorkerAmiId:
    Description: AMI ID
    Value: !Ref WorkerAmiId
  WorkerAmiVersion:
    Description: AMI Version
    Value: !Ref WorkerAmiVersion
  WorkerInstanceType:
    Description: Instance Type
    Value: !Ref WorkerInstanceType
  WorkerSubnetIdList:
    Description: Subnet ID List
    Value: !Join [ ',', !Ref WorkerSubnetIdList ]
  WorkerEc2Key:
    Description: EC2 SSH Key
    Value: !Ref WorkerEc2Key
  WorkerSecurityGroupIdList:
    Description: Security Group ID List
    Value: !Join [ ',', !Ref WorkerSecurityGroupIdList ]
  WorkerIamProfile:
    Description: IAM EC2 Instance Profile
    Value: !Ref WorkerIamProfile
  VpcId:
    Description: VPC ID
    Value: !Ref VpcId
  S3DeployBucketName:
    Description: S3 Deploy Bucket Name
    Value: !Ref S3DeployBucketName
  CookbookVersion:
    Description: Chef Cookbook Version
    Value: !Ref CookbookVersion
  S3BackupBucketName:
    Value: !Ref S3BackupBucketName
  RestoreFromBackup:
    Value: !Ref RestoreFromBackup
  RestoreStackName:
    Value: !Ref RestoreStackName
  SetupBackups:
    Value: !Ref SetupBackups
